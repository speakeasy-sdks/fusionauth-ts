/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { WebAuthnWorkflow } from "./webauthnworkflow";
import { Expose, Transform } from "class-transformer";

export class WebAuthnStartRequestState extends SpeakeasyBase {}

/**
 * API request to start a WebAuthn authentication ceremony
 */
export class WebAuthnStartRequest extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "applicationId" })
    applicationId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "credentialId" })
    credentialId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "loginId" })
    loginId?: string;

    @SpeakeasyMetadata({ elemType: WebAuthnStartRequestState })
    @Expose({ name: "state" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, WebAuthnStartRequestState> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], WebAuthnStartRequestState);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    state?: Record<string, WebAuthnStartRequestState>;

    @SpeakeasyMetadata()
    @Expose({ name: "userId" })
    userId?: string;

    /**
     * Identifies the WebAuthn workflow. This will affect the parameters used for credential creation  and request based on the Tenant configuration.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "workflow" })
    workflow?: WebAuthnWorkflow;
}
