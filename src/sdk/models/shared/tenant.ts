/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConnectorPolicy } from "./connectorpolicy";
import { EmailConfiguration } from "./emailconfiguration";
import { EventConfiguration } from "./eventconfiguration";
import { ExternalIdentifierConfiguration } from "./externalidentifierconfiguration";
import { FailedAuthenticationConfiguration } from "./failedauthenticationconfiguration";
import { FamilyConfiguration } from "./familyconfiguration";
import { JWTConfiguration } from "./jwtconfiguration";
import { MaximumPasswordAge } from "./maximumpasswordage";
import { MinimumPasswordAge } from "./minimumpasswordage";
import { ObjectState } from "./objectstate";
import { PasswordEncryptionConfiguration } from "./passwordencryptionconfiguration";
import { PasswordValidationRules } from "./passwordvalidationrules";
import { TenantAccessControlConfiguration } from "./tenantaccesscontrolconfiguration";
import { TenantCaptchaConfiguration } from "./tenantcaptchaconfiguration";
import { TenantFormConfiguration } from "./tenantformconfiguration";
import { TenantLambdaConfiguration } from "./tenantlambdaconfiguration";
import { TenantLoginConfiguration } from "./tenantloginconfiguration";
import { TenantMultiFactorConfiguration } from "./tenantmultifactorconfiguration";
import { TenantOAuth2Configuration } from "./tenantoauth2configuration";
import { TenantRateLimitConfiguration } from "./tenantratelimitconfiguration";
import { TenantRegistrationConfiguration } from "./tenantregistrationconfiguration";
import { TenantSCIMServerConfiguration } from "./tenantscimserverconfiguration";
import { TenantSSOConfiguration } from "./tenantssoconfiguration";
import { TenantUserDeletePolicy } from "./tenantuserdeletepolicy";
import { TenantUsernameConfiguration } from "./tenantusernameconfiguration";
import { TenantWebAuthnConfiguration } from "./tenantwebauthnconfiguration";
import { Expose, Transform, Type } from "class-transformer";

export class TenantData extends SpeakeasyBase {}

export class Tenant extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "accessControlConfiguration" })
    @Type(() => TenantAccessControlConfiguration)
    accessControlConfiguration?: TenantAccessControlConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "captchaConfiguration" })
    @Type(() => TenantCaptchaConfiguration)
    captchaConfiguration?: TenantCaptchaConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "configured" })
    configured?: boolean;

    @SpeakeasyMetadata({ elemType: ConnectorPolicy })
    @Expose({ name: "connectorPolicies" })
    @Type(() => ConnectorPolicy)
    connectorPolicies?: ConnectorPolicy[];

    @SpeakeasyMetadata({ elemType: TenantData })
    @Expose({ name: "data" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, TenantData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], TenantData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    data?: Record<string, TenantData>;

    @SpeakeasyMetadata()
    @Expose({ name: "emailConfiguration" })
    @Type(() => EmailConfiguration)
    emailConfiguration?: EmailConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "eventConfiguration" })
    @Type(() => EventConfiguration)
    eventConfiguration?: EventConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "externalIdentifierConfiguration" })
    @Type(() => ExternalIdentifierConfiguration)
    externalIdentifierConfiguration?: ExternalIdentifierConfiguration;

    /**
     * Configuration for the behavior of failed login attempts. This helps us protect against brute force password attacks.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "failedAuthenticationConfiguration" })
    @Type(() => FailedAuthenticationConfiguration)
    failedAuthenticationConfiguration?: FailedAuthenticationConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "familyConfiguration" })
    @Type(() => FamilyConfiguration)
    familyConfiguration?: FamilyConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "formConfiguration" })
    @Type(() => TenantFormConfiguration)
    formConfiguration?: TenantFormConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "httpSessionMaxInactiveInterval" })
    httpSessionMaxInactiveInterval?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "insertInstant" })
    insertInstant?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "issuer" })
    issuer?: string;

    /**
     * JWT Configuration. A JWT Configuration for an Application may not be active if it is using the global configuration, the configuration  may be <code>enabled = false<code>.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "jwtConfiguration" })
    @Type(() => JWTConfiguration)
    jwtConfiguration?: JWTConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "lambdaConfiguration" })
    @Type(() => TenantLambdaConfiguration)
    lambdaConfiguration?: TenantLambdaConfiguration;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "lastUpdateInstant" })
    lastUpdateInstant?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "loginConfiguration" })
    @Type(() => TenantLoginConfiguration)
    loginConfiguration?: TenantLoginConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "logoutURL" })
    logoutURL?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "maximumPasswordAge" })
    @Type(() => MaximumPasswordAge)
    maximumPasswordAge?: MaximumPasswordAge;

    @SpeakeasyMetadata()
    @Expose({ name: "minimumPasswordAge" })
    @Type(() => MinimumPasswordAge)
    minimumPasswordAge?: MinimumPasswordAge;

    @SpeakeasyMetadata()
    @Expose({ name: "multiFactorConfiguration" })
    @Type(() => TenantMultiFactorConfiguration)
    multiFactorConfiguration?: TenantMultiFactorConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "oauthConfiguration" })
    @Type(() => TenantOAuth2Configuration)
    oauthConfiguration?: TenantOAuth2Configuration;

    /**
     * Password Encryption Scheme Configuration
     */
    @SpeakeasyMetadata()
    @Expose({ name: "passwordEncryptionConfiguration" })
    @Type(() => PasswordEncryptionConfiguration)
    passwordEncryptionConfiguration?: PasswordEncryptionConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "passwordValidationRules" })
    @Type(() => PasswordValidationRules)
    passwordValidationRules?: PasswordValidationRules;

    @SpeakeasyMetadata()
    @Expose({ name: "rateLimitConfiguration" })
    @Type(() => TenantRateLimitConfiguration)
    rateLimitConfiguration?: TenantRateLimitConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "registrationConfiguration" })
    @Type(() => TenantRegistrationConfiguration)
    registrationConfiguration?: TenantRegistrationConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "scimServerConfiguration" })
    @Type(() => TenantSCIMServerConfiguration)
    scimServerConfiguration?: TenantSCIMServerConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "ssoConfiguration" })
    @Type(() => TenantSSOConfiguration)
    ssoConfiguration?: TenantSSOConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "state" })
    state?: ObjectState;

    @SpeakeasyMetadata()
    @Expose({ name: "themeId" })
    themeId?: string;

    /**
     * A Tenant-level policy for deleting Users.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "userDeletePolicy" })
    @Type(() => TenantUserDeletePolicy)
    userDeletePolicy?: TenantUserDeletePolicy;

    @SpeakeasyMetadata()
    @Expose({ name: "usernameConfiguration" })
    @Type(() => TenantUsernameConfiguration)
    usernameConfiguration?: TenantUsernameConfiguration;

    /**
     * Tenant-level configuration for WebAuthn
     */
    @SpeakeasyMetadata()
    @Expose({ name: "webAuthnConfiguration" })
    @Type(() => TenantWebAuthnConfiguration)
    webAuthnConfiguration?: TenantWebAuthnConfiguration;
}
