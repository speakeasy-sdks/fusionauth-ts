/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { IdentityProviderLimitUserLinkingPolicy } from "./identityproviderlimituserlinkingpolicy";
import { Expose, Transform, Type } from "class-transformer";

export class IdentityProviderTenantConfigurationData extends SpeakeasyBase {}

export class IdentityProviderTenantConfiguration extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: IdentityProviderTenantConfigurationData })
    @Expose({ name: "data" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, IdentityProviderTenantConfigurationData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], IdentityProviderTenantConfigurationData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    data?: Record<string, IdentityProviderTenantConfigurationData>;

    @SpeakeasyMetadata()
    @Expose({ name: "limitUserLinkCount" })
    @Type(() => IdentityProviderLimitUserLinkingPolicy)
    limitUserLinkCount?: IdentityProviderLimitUserLinkingPolicy;
}
