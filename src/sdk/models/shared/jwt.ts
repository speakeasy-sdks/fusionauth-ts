/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class JWTAud extends SpeakeasyBase {}

export class JWTOtherClaims extends SpeakeasyBase {}

/**
 * JSON Web Token (JWT) as defined by RFC 7519.  <pre>  From RFC 7519 Section 1. Introduction:     The suggested pronunciation of JWT is the same as the English word "jot".  <pre>  The JWT is not Thread-Safe and should not be re-used.
 */
export class Jwt extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "aud" })
    @Type(() => JWTAud)
    aud?: JWTAud;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "exp" })
    exp?: number;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "iat" })
    iat?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "iss" })
    iss?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "jti" })
    jti?: string;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "nbf" })
    nbf?: number;

    @SpeakeasyMetadata({ elemType: JWTOtherClaims })
    @Expose({ name: "otherClaims" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, JWTOtherClaims> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], JWTOtherClaims);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    otherClaims?: Record<string, JWTOtherClaims>;

    @SpeakeasyMetadata()
    @Expose({ name: "sub" })
    sub?: string;
}
