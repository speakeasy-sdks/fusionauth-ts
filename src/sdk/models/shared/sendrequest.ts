/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EmailAddress } from "./emailaddress";
import { Expose, Transform, Type } from "class-transformer";

export class SendRequestRequestData extends SpeakeasyBase {}

export class SendRequest extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "applicationId" })
    applicationId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "bccAddresses" })
    bccAddresses?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "ccAddresses" })
    ccAddresses?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "preferredLanguages" })
    preferredLanguages?: string[];

    @SpeakeasyMetadata({ elemType: SendRequestRequestData })
    @Expose({ name: "requestData" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, SendRequestRequestData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], SendRequestRequestData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    requestData?: Record<string, SendRequestRequestData>;

    @SpeakeasyMetadata({ elemType: EmailAddress })
    @Expose({ name: "toAddresses" })
    @Type(() => EmailAddress)
    toAddresses?: EmailAddress[];

    @SpeakeasyMetadata()
    @Expose({ name: "userIds" })
    userIds?: string[];
}
