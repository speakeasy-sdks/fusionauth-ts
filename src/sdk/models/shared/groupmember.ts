/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { User } from "./user";
import { Expose, Transform, Type } from "class-transformer";

export class GroupMemberData extends SpeakeasyBase {}

/**
 * A User's membership into a Group
 */
export class GroupMember extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: GroupMemberData })
    @Expose({ name: "data" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, GroupMemberData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], GroupMemberData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    data?: Record<string, GroupMemberData>;

    @SpeakeasyMetadata()
    @Expose({ name: "groupId" })
    groupId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "insertInstant" })
    insertInstant?: number;

    /**
     * The global view of a User. This object contains all global information about the user including birth date, registration information  preferred languages, global attributes, etc.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => User)
    user?: User;

    @SpeakeasyMetadata()
    @Expose({ name: "userId" })
    userId?: string;
}
