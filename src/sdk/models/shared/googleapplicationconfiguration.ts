/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GoogleIdentityProviderProperties } from "./googleidentityproviderproperties";
import { IdentityProviderLoginMethod } from "./identityproviderloginmethod";
import { Expose, Transform, Type } from "class-transformer";

export class GoogleApplicationConfigurationData extends SpeakeasyBase {}

export class GoogleApplicationConfiguration extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "buttonText" })
    buttonText?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "client_id" })
    clientId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "client_secret" })
    clientSecret?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "createRegistration" })
    createRegistration?: boolean;

    @SpeakeasyMetadata({ elemType: GoogleApplicationConfigurationData })
    @Expose({ name: "data" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, GoogleApplicationConfigurationData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], GoogleApplicationConfigurationData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    data?: Record<string, GoogleApplicationConfigurationData>;

    @SpeakeasyMetadata()
    @Expose({ name: "loginMethod" })
    loginMethod?: IdentityProviderLoginMethod;

    /**
     * Google social login provider parameters.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "properties" })
    @Type(() => GoogleIdentityProviderProperties)
    properties?: GoogleIdentityProviderProperties;

    @SpeakeasyMetadata()
    @Expose({ name: "scope" })
    scope?: string;
}
