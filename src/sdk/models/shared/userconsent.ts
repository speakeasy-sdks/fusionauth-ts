/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Consent } from "./consent";
import { ConsentStatus } from "./consentstatus";
import { Expose, Transform, Type } from "class-transformer";

export class UserConsentData extends SpeakeasyBase {}

/**
 * Models a User consent.
 */
export class UserConsent extends SpeakeasyBase {
    /**
     * Models a consent.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "consent" })
    @Type(() => Consent)
    consent?: Consent;

    @SpeakeasyMetadata()
    @Expose({ name: "consentId" })
    consentId?: string;

    @SpeakeasyMetadata({ elemType: UserConsentData })
    @Expose({ name: "data" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, UserConsentData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], UserConsentData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    data?: Record<string, UserConsentData>;

    @SpeakeasyMetadata()
    @Expose({ name: "giverUserId" })
    giverUserId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "insertInstant" })
    insertInstant?: number;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "lastUpdateInstant" })
    lastUpdateInstant?: number;

    /**
     * Models a consent.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: ConsentStatus;

    @SpeakeasyMetadata()
    @Expose({ name: "userId" })
    userId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "values" })
    values?: string[];
}
