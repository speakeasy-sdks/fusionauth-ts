/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EventInfo } from "./eventinfo";
import { Expose, Transform, Type } from "class-transformer";

export class ForgotPasswordRequestState extends SpeakeasyBase {}

/**
 * Forgot password request object.
 */
export class ForgotPasswordRequest extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "applicationId" })
    applicationId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "changePasswordId" })
    changePasswordId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "email" })
    email?: string;

    /**
     * Information about a user event (login, register, etc) that helps identify the source of the event (location, device type, OS, etc).
     */
    @SpeakeasyMetadata()
    @Expose({ name: "eventInfo" })
    @Type(() => EventInfo)
    eventInfo?: EventInfo;

    @SpeakeasyMetadata()
    @Expose({ name: "loginId" })
    loginId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "sendForgotPasswordEmail" })
    sendForgotPasswordEmail?: boolean;

    @SpeakeasyMetadata({ elemType: ForgotPasswordRequestState })
    @Expose({ name: "state" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, ForgotPasswordRequestState> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], ForgotPasswordRequestState);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    state?: Record<string, ForgotPasswordRequestState>;

    @SpeakeasyMetadata()
    @Expose({ name: "username" })
    username?: string;
}
