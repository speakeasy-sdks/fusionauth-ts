/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class AppleApplicationConfigurationData extends SpeakeasyBase {}

export class AppleApplicationConfiguration extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "bundleId" })
    bundleId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "buttonText" })
    buttonText?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "createRegistration" })
    createRegistration?: boolean;

    @SpeakeasyMetadata({ elemType: AppleApplicationConfigurationData })
    @Expose({ name: "data" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, AppleApplicationConfigurationData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], AppleApplicationConfigurationData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    data?: Record<string, AppleApplicationConfigurationData>;

    @SpeakeasyMetadata()
    @Expose({ name: "keyId" })
    keyId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "scope" })
    scope?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "servicesId" })
    servicesId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "teamId" })
    teamId?: string;
}
