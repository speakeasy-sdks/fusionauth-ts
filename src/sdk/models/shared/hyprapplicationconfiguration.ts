/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class HYPRApplicationConfigurationData extends SpeakeasyBase {}

export class HYPRApplicationConfiguration extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "createRegistration" })
    createRegistration?: boolean;

    @SpeakeasyMetadata({ elemType: HYPRApplicationConfigurationData })
    @Expose({ name: "data" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, HYPRApplicationConfigurationData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], HYPRApplicationConfigurationData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    data?: Record<string, HYPRApplicationConfigurationData>;

    @SpeakeasyMetadata()
    @Expose({ name: "relyingPartyApplicationId" })
    relyingPartyApplicationId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "relyingPartyURL" })
    relyingPartyURL?: string;
}
