/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class EntityTypePermissionData extends SpeakeasyBase {}

/**
 * Models a specific entity type permission. This permission can be granted to users or other entities.
 */
export class EntityTypePermission extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: EntityTypePermissionData })
    @Expose({ name: "data" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, EntityTypePermissionData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], EntityTypePermissionData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    data?: Record<string, EntityTypePermissionData>;

    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "insertInstant" })
    insertInstant?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "isDefault" })
    isDefault?: boolean;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "lastUpdateInstant" })
    lastUpdateInstant?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}
