/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Location } from "./location";
import { Expose, Transform, Type } from "class-transformer";

export class EventInfoData extends SpeakeasyBase {}

/**
 * Information about a user event (login, register, etc) that helps identify the source of the event (location, device type, OS, etc).
 */
export class EventInfo extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: EventInfoData })
    @Expose({ name: "data" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, EventInfoData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], EventInfoData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    data?: Record<string, EventInfoData>;

    @SpeakeasyMetadata()
    @Expose({ name: "deviceDescription" })
    deviceDescription?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "deviceName" })
    deviceName?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "deviceType" })
    deviceType?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "ipAddress" })
    ipAddress?: string;

    /**
     * Location information. Useful for IP addresses and other displayable data objects.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "location" })
    @Type(() => Location)
    location?: Location;

    @SpeakeasyMetadata()
    @Expose({ name: "os" })
    os?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "userAgent" })
    userAgent?: string;
}
