/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ChangePasswordReason } from "./changepasswordreason";
import { LoginPreventedResponse } from "./loginpreventedresponse";
import { TwoFactorMethod } from "./twofactormethod";
import { User } from "./user";
import { Expose, Transform, Type } from "class-transformer";

export class LoginResponseState extends SpeakeasyBase {}

export class LoginResponse extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: LoginPreventedResponse })
    @Expose({ name: "actions" })
    @Type(() => LoginPreventedResponse)
    actions?: LoginPreventedResponse[];

    @SpeakeasyMetadata()
    @Expose({ name: "changePasswordId" })
    changePasswordId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "changePasswordReason" })
    changePasswordReason?: ChangePasswordReason;

    @SpeakeasyMetadata()
    @Expose({ name: "configurableMethods" })
    configurableMethods?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "emailVerificationId" })
    emailVerificationId?: string;

    @SpeakeasyMetadata({ elemType: TwoFactorMethod })
    @Expose({ name: "methods" })
    @Type(() => TwoFactorMethod)
    methods?: TwoFactorMethod[];

    @SpeakeasyMetadata()
    @Expose({ name: "pendingIdPLinkId" })
    pendingIdPLinkId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "refreshToken" })
    refreshToken?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "refreshTokenId" })
    refreshTokenId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "registrationVerificationId" })
    registrationVerificationId?: string;

    @SpeakeasyMetadata({ elemType: LoginResponseState })
    @Expose({ name: "state" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, LoginResponseState> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], LoginResponseState);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    state?: Record<string, LoginResponseState>;

    @SpeakeasyMetadata()
    @Expose({ name: "threatsDetected" })
    threatsDetected?: any[];

    @SpeakeasyMetadata()
    @Expose({ name: "token" })
    token?: string;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "tokenExpirationInstant" })
    tokenExpirationInstant?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "trustToken" })
    trustToken?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "twoFactorId" })
    twoFactorId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "twoFactorTrustId" })
    twoFactorTrustId?: string;

    /**
     * The global view of a User. This object contains all global information about the user including birth date, registration information  preferred languages, global attributes, etc.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => User)
    user?: User;
}
