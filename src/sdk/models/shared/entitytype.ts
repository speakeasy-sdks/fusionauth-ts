/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EntityJWTConfiguration } from "./entityjwtconfiguration";
import { EntityTypePermission } from "./entitytypepermission";
import { Expose, Transform, Type } from "class-transformer";

export class EntityTypeData extends SpeakeasyBase {}

/**
 * Models an entity type that has a specific set of permissions. These are global objects and can be used across tenants.
 */
export class EntityType extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: EntityTypeData })
    @Expose({ name: "data" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, EntityTypeData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], EntityTypeData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    data?: Record<string, EntityTypeData>;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "insertInstant" })
    insertInstant?: number;

    /**
     * JWT Configuration for entities.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "jwtConfiguration" })
    @Type(() => EntityJWTConfiguration)
    jwtConfiguration?: EntityJWTConfiguration;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "lastUpdateInstant" })
    lastUpdateInstant?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata({ elemType: EntityTypePermission })
    @Expose({ name: "permissions" })
    @Type(() => EntityTypePermission)
    permissions?: EntityTypePermission[];
}
