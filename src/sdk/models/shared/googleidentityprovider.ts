/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GoogleApplicationConfiguration } from "./googleapplicationconfiguration";
import { GoogleIdentityProviderProperties } from "./googleidentityproviderproperties";
import { IdentityProviderLinkingStrategy } from "./identityproviderlinkingstrategy";
import { IdentityProviderLoginMethod } from "./identityproviderloginmethod";
import { IdentityProviderTenantConfiguration } from "./identityprovidertenantconfiguration";
import { IdentityProviderType } from "./identityprovidertype";
import { ProviderLambdaConfiguration } from "./providerlambdaconfiguration";
import { Expose, Transform, Type } from "class-transformer";

export class GoogleIdentityProviderData extends SpeakeasyBase {}

/**
 * Google social login provider.
 */
export class GoogleIdentityProvider extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: GoogleApplicationConfiguration })
    @Expose({ name: "applicationConfiguration" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, GoogleApplicationConfiguration> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], GoogleApplicationConfiguration);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    applicationConfiguration?: Record<string, GoogleApplicationConfiguration>;

    @SpeakeasyMetadata()
    @Expose({ name: "buttonText" })
    buttonText?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "client_id" })
    clientId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "client_secret" })
    clientSecret?: string;

    @SpeakeasyMetadata({ elemType: GoogleIdentityProviderData })
    @Expose({ name: "data" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, GoogleIdentityProviderData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], GoogleIdentityProviderData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    data?: Record<string, GoogleIdentityProviderData>;

    @SpeakeasyMetadata()
    @Expose({ name: "debug" })
    debug?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "insertInstant" })
    insertInstant?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "lambdaConfiguration" })
    @Type(() => ProviderLambdaConfiguration)
    lambdaConfiguration?: ProviderLambdaConfiguration;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "lastUpdateInstant" })
    lastUpdateInstant?: number;

    /**
     * The IdP behavior when no user link has been made yet.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "linkingStrategy" })
    linkingStrategy?: IdentityProviderLinkingStrategy;

    @SpeakeasyMetadata()
    @Expose({ name: "loginMethod" })
    loginMethod?: IdentityProviderLoginMethod;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * Google social login provider parameters.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "properties" })
    @Type(() => GoogleIdentityProviderProperties)
    properties?: GoogleIdentityProviderProperties;

    @SpeakeasyMetadata()
    @Expose({ name: "scope" })
    scope?: string;

    @SpeakeasyMetadata({ elemType: IdentityProviderTenantConfiguration })
    @Expose({ name: "tenantConfiguration" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, IdentityProviderTenantConfiguration> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], IdentityProviderTenantConfiguration);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    tenantConfiguration?: Record<string, IdentityProviderTenantConfiguration>;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: IdentityProviderType;
}
