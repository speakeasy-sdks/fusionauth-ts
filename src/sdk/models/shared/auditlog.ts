/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class AuditLogData extends SpeakeasyBase {}

export class AuditLogNewValue extends SpeakeasyBase {}

export class AuditLogOldValue extends SpeakeasyBase {}

/**
 * An audit log.
 */
export class AuditLog extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: AuditLogData })
    @Expose({ name: "data" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, AuditLogData> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], AuditLogData);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    data?: Record<string, AuditLogData>;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "insertInstant" })
    insertInstant?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "insertUser" })
    insertUser?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "message" })
    message?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "newValue" })
    @Type(() => AuditLogNewValue)
    newValue?: AuditLogNewValue;

    @SpeakeasyMetadata()
    @Expose({ name: "oldValue" })
    @Type(() => AuditLogOldValue)
    oldValue?: AuditLogOldValue;

    @SpeakeasyMetadata()
    @Expose({ name: "reason" })
    reason?: string;
}
