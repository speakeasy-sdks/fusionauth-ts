/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class TenantSCIMServerConfigurationSchemas extends SpeakeasyBase {}

export class TenantSCIMServerConfiguration extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "clientEntityTypeId" })
    clientEntityTypeId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "enabled" })
    enabled?: boolean;

    @SpeakeasyMetadata({ elemType: TenantSCIMServerConfigurationSchemas })
    @Expose({ name: "schemas" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, TenantSCIMServerConfigurationSchemas> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], TenantSCIMServerConfigurationSchemas);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    schemas?: Record<string, TenantSCIMServerConfigurationSchemas>;

    @SpeakeasyMetadata()
    @Expose({ name: "serverEntityTypeId" })
    serverEntityTypeId?: string;
}
